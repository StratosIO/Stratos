openapi: 3.0.0
info:
  title: Stratos Video Processing API
  description: API for the Stratos web-based video processing platform
  version: '1.0.0'
  contact:
    name: Stratos Team
    url: https://github.com/StratosIO/Stratos

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - INVALID_INPUT
            - PROCESSING_FAILED
            - INVALID_CREDENTIALS
            - USER_EXISTS
            - SERVER_ERROR
            - NOT_FOUND
        message:
          type: string
          description: Detailed error message

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        created_at:
          type: string
          format: date-time

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT token for authentication

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input or user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Authenticate user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /uploads:
    post:
      summary: Upload a new video
      description: Upload a video file for processing
      tags:
        - Videos
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - video
              properties:
                video:
                  type: string
                  format: binary
                  description: The video file to upload
      responses:
        '201':
          description: Video uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "123e4567-e89b-12d3-a456-426614174000"
                      file_name:
                        type: string
                        example: "processed_video.mp4"
                      file_path:
                        type: string
                        example: "/uploads/processed_video.mp4"
                  fileInfo:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "example.mp4"
                      type:
                        type: string
                        example: "video/mp4"
                      size:
                        type: number
                        example: 1048576
        '400':
          description: Invalid input - No file provided or invalid file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error during upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List videos
      description: Get a paginated list of uploaded videos
      tags:
        - Videos
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of videos to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: cursor
          in: query
          description: Base64 encoded cursor for pagination
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of videos retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        file_name:
                          type: string
                        file_size:
                          type: number
                        mime_type:
                          type: string
                        uploaded_at:
                          type: string
                          format: date-time
                        file_path:
                          type: string
                  pagination:
                    type: object
                    properties:
                      next_cursor:
                        type: string
                        description: Base64 encoded cursor for next page
                        nullable: true
                      has_more:
                        type: boolean
                        description: Indicates if more videos are available
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error while fetching videos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /uploads/{id}:
    delete:
      summary: Delete a video
      description: Delete a video and its associated file
      tags:
        - Videos
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the video to delete
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Video deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error during deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'