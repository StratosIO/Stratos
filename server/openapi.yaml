openapi: 3.0.0
info:
  title: Stratos Video Processing API
  description: |
    API for the Stratos cloud-based video processing platform.
    Enables video upload, processing, and management.
  version: '1.0.0'
  contact:
    name: Stratos Team
    url: https://github.com/StratosIO/Stratos

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        created_at:
          type: string
          format: date-time

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT token for authentication

    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [uploading, processing, ready, failed]
        fileSize:
          type: integer
          format: int64
        duration:
          type: integer
        format:
          type: string
        resolution:
          type: string
        createdAt:
          type: string
          format: date-time

    ProcessingJob:
      type: object
      properties:
        id:
          type: string
          format: uuid
        videoId:
          type: string
          format: uuid
        type:
          type: string
          enum: [compression, conversion, ai_enhancement]
        status:
          type: string
          enum: [queued, processing, completed, failed]
        progress:
          type: integer
          minimum: 0
          maximum: 100
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User already exists or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Authenticate user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /videos/init:
    post:
      summary: Initialize video upload
      tags:
        - Videos
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - filename
                - fileSize
              properties:
                filename:
                  type: string
                fileSize:
                  type: integer
                  format: int64
                metadata:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    retentionDays:
                      type: integer
                      minimum: 1
      responses:
        '201':
          description: Upload initialized
          content:
            application/json:
              schema:
                type: object
                properties:
                  videoId:
                    type: string
                    format: uuid
                  uploadUrl:
                    type: string
                  expiresIn:
                    type: integer

  /videos/{videoId}/complete:
    post:
      summary: Complete video upload
      tags:
        - Videos
      security:
        - BearerAuth: []
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Upload completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  videoId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [processing]

  /videos/{videoId}:
    get:
      summary: Get video details
      tags:
        - Videos
      security:
        - BearerAuth: []
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Video details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /videos:
    get:
      summary: List videos
      tags:
        - Videos
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [uploading, processing, ready, failed]
      responses:
        '200':
          description: List of videos
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer

  /videos/{videoId}/jobs:
    post:
      summary: Create processing job
      tags:
        - Jobs
      security:
        - BearerAuth: []
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - parameters
              properties:
                type:
                  type: string
                  enum: [compression, conversion, ai_enhancement]
                parameters:
                  type: object
                  additionalProperties: true
                priority:
                  type: integer
                  minimum: 1
                  maximum: 10
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [queued]
                  estimatedTime:
                    type: integer

  /jobs/{jobId}:
    get:
      summary: Get job status
      tags:
        - Jobs
      security:
        - BearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingJob'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /jobs:
    get:
      summary: List jobs
      tags:
        - Jobs
      security:
        - BearerAuth: []
      parameters:
        - name: videoId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [queued, processing, completed, failed]
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProcessingJob'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer

